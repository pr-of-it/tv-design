//[Table of Functions]

//Function reference:					    | examples:
// .clearfix								| .element { .clearfix(); or .line(); }
// .placeholder								| .element { .placeholder(@color); }
// .font-face								| .element { .font-face(PT Sans, ptsans-webfont); }
// .box-shadow								| .element { .box-shadow(0 1px 10px rgba(20,20,20,0.5), 0 1px 10px rgba(20,20,20,0.5)); }
// .opacity									| .element { .opacity(.5); }
// .box-sizing								| .element { .box-sizing(border-box); }
// .user-select								| .element { .user-select(none); }

//background
// .background-clip							| .element { .background-clip(padding-box); }
// .background-image(gradient constructor)	| .element { .background-image(linear-gradient(to bottom, #ffffff, #929292)); } // to bottom
//

//borders
// .border-radius							| .element{ .border-radius(0 10px 0 0); }

//transitions
// .transition 								| .element { .transition(all .3s ease); }
// .transition-property 					| .element { .transition-property(width, height, margin); }
// .transition-duration						| .element { .transition-duration(.25s); }
// .transition-timing-function				| .element { .transition-timing-function(cubic-bezier(0,0,1,1)); } // linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier(n,n,n,n)
// .transition-delay 						| .element { .transition-delay(2s); }

//transforms
// .transform								| .element { .transform(scale(.5) translate(10px, 20px)); }

//----------------------------------------------------------------------------------------------------*/

//  @GlobalConfig

// Config supported browsers for your project
@w3c: true; // Unprefixed W3C syntax
@webkit: true; // Chrome 7+, Safari 5+, iOS5, Android
@moz: true; //  Firefox 4+
@opera: true; // Opera 10.5+
@ms: true;  // IE 10+
@pie: true;  // CSS3 PIE

// Signals
@webkitSignal: 1;
@mozSignal: 2;
@operaSignal: 3;
@msSignal: 4;
@w3cSignal: 5;

//  Function reference:

//// For clearing floats like a boss h5bp.com/q
.clearfix,
.line {
	*zoom: 1;
	&:before,
	&:after {
		display: table;
		content: "";
		// Fixes Opera/contenteditable bug:
		// http://nicolasgallagher.com/micro-clearfix-hack/#comment-36952
		line-height: 0;
	}
	&:after {
		clear: both;
	}
}

// Placeholder text
// -------------------------
.placeholder(@color) {
	&:-moz-placeholder {
		color: @color;
	}
	&:-ms-input-placeholder {
		color: @color;
	}
	&::-webkit-input-placeholder {
		color: @color;
	}
}

//  .font-face
.font-face(@fontname, @fontfile) {

	font-family: "@{fontname}";
	src: url("@{fontfile}-webfont.eot");
	src: url("@{fontfile}-webfont.eot?#iefix") format("embedded-opentype"),
	url("@{fontfile}-webfont.woff") format("woff"),
	url("@{fontfile}-webfont.ttf") format("truetype"),
	url("@{fontfile}-webfont.svg#@{fontname}") format("svg");
	font-weight: normal;
	font-style: normal;
}
//  element { .font-face(ZendaRegular, zenda-webfont); }

//  .box-shadow
.box-shadow(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+

	@processing: ~`(function(){ var arg = "@{arguments}".replace("[","").replace("]","") || "none"; if( !/^#?\w*%?([ X])/.test(arg) ) { arg = arg.replace(/,(?=[^()]*\))/g,'--').replace(/,/g,"").replace(/--/g,','); } return arg; })()`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-box-shadow: @processing;}
		.inception (@signal, @arguments) when (@signal = 2) { -moz-box-shadow: @processing;}
		.inception (@signal, @arguments) when (@signal = 5) { box-shadow: @processing;}
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);

	//color: @arguments;
}
//  element { .box-shadow(0 1px 10px rgba(20,20,20,0.5), 0 1px 10px rgba(20,20,20,0.5)); }

//  .opacity
.opacity(@arguments:1){
	@ieOpacity: @arguments*100;

	opacity:@arguments;
	filter: ~"alpha(opacity='@{ieOpacity}')";
}
//  element { .opacity(.5); }

//  .box-sizing
.box-sizing(@arguments:content-box){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-box-sizing: @arguments;}
		.inception (@signal, @arguments) when (@signal = 2) { -moz-box-sizing: @arguments;}
		.inception (@signal, @arguments) when (@signal = 5) { box-sizing: @arguments;}
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//  element { .box-sizing(border-box); }

//  .user-select
.user-select(@arguments:auto){

	//  Local config for disabling properties

	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@msLocal: true;  // IE 10+

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-user-select: @arguments; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-user-select: @arguments; }
		.inception (@signal, @arguments) when (@signal = 4) { -ms-user-select: @arguments; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @msSignal, @ms, @msLocal);
}
//   element { .user-select(text); }

//  .background-clip
.background-clip(@arguments:border-box){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-background-clip: @arguments;}
		.inception (@signal, @arguments) when (@signal = 2) { -moz-background-clip: @arguments;}
		.inception (@signal, @arguments) when (@signal = 5) { background-clip: @arguments;}
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//  element { .background-clip(padding-box); }

//  .background-image (gradient constructor)
.background-image(...){

	//  Local config for disabling properties

	@svg: true; //  SVG gradient for IE9
	@mozLocal: true; //  Firefox 4+
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5+, Android
	@operaLocal: true; // Opera 10.5+
	@w3cLocal: true; // Unprefixed W3C syntax
	@pieLocal: true; // CSS3 PIE syntax

	@backgroundSVG: ~`(function(){function K(a){var b="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",c,d,e,f,g,h,i,j,k=0,l=0,m="",n=[];if(!a)return a;do c=a.charCodeAt(k++),d=a.charCodeAt(k++),e=a.charCodeAt(k++),j=c<<16|d<<8|e,f=j>>18&63,g=j>>12&63,h=j>>6&63,i=j&63,n[l++]=b.charAt(f)+b.charAt(g)+b.charAt(h)+b.charAt(i);while(k<a.length);m=n.join("");var o=a.length%3;return(o?m.slice(0,o-3):m)+"===".slice(o||3)}String.prototype.trim===undefined&&(String.prototype.trim=function(){return this.replace(/^\s+/,"").replace(/\s+$/,"")});var a="@{arguments}",b=null,c=!0,d=a.split(/,(?=\s*(?:linear|radial))/g),e=d.length,f=/top/,g=/right/,h=/bottom/,i=/left/,j=/to\s*top/,k=/to\s*right/,l=/to\s*bottom/,m=/to\s*left/,n=/45deg/,o=/-45deg/,p=/\d*deg/;for(var q=0;q<e;q++){if(/linear/.test(d[q])){d[q]=d[q].replace(/linear-gradient\s*\(/,'<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none">');if(f.test(d[q])&&!j.test(d[q])||l.test(d[q])||/180deg/.test(d[q])){var r=null;l.test(d[q])?r=l:/180deg/.test(d[q])?r=/180deg/:r=f,d[q]=d[q].replace(r,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="0%" y1="0%" x2="0%" y2="100%">')}else if(g.test(d[q])&&!k.test(d[q])||m.test(d[q])||/270deg/.test(d[q])){var r=null;m.test(d[q])?r=m:/270deg/.test(d[q])?r=/270deg/:r=g,d[q]=d[q].replace(r,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="100%" y1="0%" x2="0%" y2="0%">')}else if(h.test(d[q])&&!l.test(d[q])||j.test(d[q])||/[^\d]0deg/.test(d[q])){var r=null;j.test(d[q])?r=j:/0deg/.test(d[q])?r=/0deg/:r=h,d[q]=d[q].replace(r,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="0%" y1="100%" x2="0%" y2="0%">')}else if(i.test(d[q])&&!m.test(d[q])||k.test(d[q])||/90deg/.test(d[q])){var r=null;k.test(d[q])?r=k:/90deg/.test(d[q])?r=/90deg/:r=i,d[q]=d[q].replace(r,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="0%" y1="0%" x2="100%" y2="0%">')}else n.test(d[q])&&!o.test(d[q])?d[q]=d[q].replace(n,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="0%" y1="100%" x2="100%" y2="0%">'):o.test(d[q])?d[q]=d[q].replace(o,'<linearGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" x1="0%" y1="0%" x2="100%" y2="100%">'):c=!1}try{"".trim(),b=!0}catch(s){b=!1}b&&(d[q]=d[q].trim());if(/linear/.test(d[q])||/radial/.test(d[q])){d[q]=d[q].slice(0,-1),d[q]="url(data:image/svg+xml;base64--"+d[q]+'</linearGradient><rect x="0" y="0" width="1" height="1" fill="url(***)" /></svg>)';var t=d.join("@@@"),u=t.match(/rgba?\(\d+,\s*\d+,\s*\d+,\s*(?:0|1|\.\d+|0\.\d+)\)\s*\d*%*/g)||0,v=t.match(/hsla?\(\d+,\s*\d+%,\s*\d+%,\s*(?:0|1|\.\d+|0\.\d+)\)\s*\d*%*/g)||0,w=[],x=[];for(var y=0;y<u.length;y++)w[y]=u[y].replace(/,/g,"--");for(var z=0;z<v.length;z++)x[z]=v[z].replace(/,/g,"--");for(var A=0;A<u.length;A++)t=t.replace(u[A],w[A]);for(var B=0;B<v.length;B++)t=t.replace(v[B],x[B]);var C=t.split(","),D=0;for(var E=0;E<C.length;E++){C[E]=C[E].replace(/(#\w{3,6})\s*(\d*.?\d*%)?/g,'<stop offset="$2" stop-color="$1" stop-opacity="1"/>').replace(/(rgba?\(\d+--\s*\d+--\s*\d+--\s*(0|1|\.\d+|0\.\d+)\))\s*(\d*.?\d*%)*/g,'<stop offset="$3" stop-color="$1" stop-opacity="$2"/>').replace(/rgba/g,"rgb").replace(/(hsla?\(\d+--\s*\d+%--\s*\d+%--\s*(0|1|\.\d+|0\.\d+)\))\s*(\d*.?\d*%)*/g,'<stop offset="$3" stop-color="$1" stop-opacity="$2"/>').replace(/hsla/g,"hsl").replace(/((?:aqua|black|blue|fuchsia|gray|grey|green|lime|maroon|navy|olive|purple|red|silver|teal|white|yellow))\s*(\d*%)*/g,'<stop offset="$2" stop-color="$1" stop-opacity="1"/>').replace(/\*\*\*/,"#grad-ucgg-generated");try{"".trim(),b=!0}catch(s){b=!1}b&&(C[E]=C[E].trim());if(/offset=""/g.test(C[E])){var F=C.length-2,G=Math.round(100/F)*D;console.log(G);var H='offset="'+G+'%"';C[E]=C[E].replace(/offset=""/,H),D++}}C=C.toString().replace(/,/g,"").replace(/--/g,",").replace(/(rgb?\(\d+,\s*\d+,\s*\d+),\s*(?:0|1|\.\d+|0\.\d+)\)/g,"$1)").replace(/(hsl?\(\d+,\s*\d+%,\s*\d+%),\s*(?:0|1|\.\d+|0\.\d+)\)/g,"$1)")}}/radial/.test(C)&&(/((ellipse).*(center)|(circle).*(center))/g.test(C)?C=C.replace(/<\/linearGradient>/g,"</radialGradient>").replace(/radial-gradient[^<]+/g,'<?xml version="1.0" ?><svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 1 1" preserveAspectRatio="none"><radialGradient id="grad-ucgg-generated" gradientUnits="userSpaceOnUse" cx="50%" cy="50%" r="75%">').replace(/<rect x=\S+\d\S+ y=\S+\d\S+ width=\S+\d\S+ height=\S+\d\S+ fill=\S+\w\S+ \/>/g,'<rect x="-50" y="-50" width="101" height="101" fill="url(#grad-ucgg-generated)" />'):C=!1);var I=null;try{C=C.split("@@@");var J=0;for(J;J<C.length;J++)I=C[J].match(/<\?xml.*<\/svg>/),I=K(I.join("")),C[J]=C[J].replace(/(<\?xml.*<\/svg>)/,I)}catch(s){}return c?C:C=!1,C?C.toString():C})()`;
	@backgroundMoz: ~`(function(){var a,b,c,d,e,f,g,h,i,j,k;a="@{arguments}",c=null,d=a.split(/,(?=\s*(?:linear|radial))/g),e=d.length,k=/to\s*top/,j=/to\s*right/,h=/to\s*bottom/,i=/to\s*left/,b=/\d*deg/,f=0;while(f<e){/linear/.test(d[f])?(d[f]=d[f].replace(/linear-gradient/,"-moz-linear-gradient"),k.test(d[f])?d[f]=d[f].replace(k,"bottom"):j.test(d[f])?d[f]=d[f].replace(j,"left"):h.test(d[f])?d[f]=d[f].replace(h,"top"):i.test(d[f])?d[f]=d[f].replace(i,"right"):b.test(d[f])&&(g=d[f].match(/\d*deg/),g=(parseInt(g)-90)*-1+"deg",d[f]=d[f].replace(b,g))):d[f]=d[f].replace(/radial-gradient/,"-moz-radial-gradient").replace(/,\s* \d*(px|%) \d*(px|%)/,", circle").replace(/\(+\s*(.*) at\s*([^,]+)/g,"($2, $1");try{"".trim(),c=!0}catch(l){c=!1}c&&(d[f]=d[f].trim()),f++}return d.toString().replace(/\[/g,"").replace(/\]/g,"")}())`;
	@backgroundWebkit: ~`(function(){var a,b,c,d,e,f,g,h,i,j,k;a="@{arguments}",c=null,d=a.split(/,(?=\s*(?:linear|radial))/g),e=d.length,k=/to\s*top/,j=/to\s*right/,h=/to\s*bottom/,i=/to\s*left/,b=/\d*deg/,f=0;while(f<e){/linear/.test(d[f])?(d[f]=d[f].replace(/linear-gradient/,"-webkit-linear-gradient"),k.test(d[f])?d[f]=d[f].replace(k,"bottom"):j.test(d[f])?d[f]=d[f].replace(j,"left"):h.test(d[f])?d[f]=d[f].replace(h,"top"):i.test(d[f])?d[f]=d[f].replace(i,"right"):b.test(d[f])&&(g=d[f].match(/\d*deg/),g=(parseInt(g)-90)*-1+"deg",d[f]=d[f].replace(b,g))):d[f]=d[f].replace(/radial-gradient/,"-webkit-radial-gradient").replace(/\(+\s*(.*) at\s*([^,]+)/g,"($2, $1");try{"".trim(),c=!0}catch(l){c=!1}c&&(d[f]=d[f].trim()),f++}return d.toString().replace(/\[/g,"").replace(/\]/g,"");}())`;
	@backgroundOpera: ~`(function(){var a,b,c,d,e,f,g,h,i,j,k;a="@{arguments}",c=null,d=a.split(/,(?=\s*(?:linear|radial))/g),e=d.length,k=/to\s*top/,j=/to\s*right/,h=/to\s*bottom/,i=/to\s*left/,b=/\d*deg/,f=0;while(f<e){/linear/.test(d[f])?(d[f]=d[f].replace(/linear-gradient/,"-o-linear-gradient"),k.test(d[f])?d[f]=d[f].replace(k,"bottom"):j.test(d[f])?d[f]=d[f].replace(j,"left"):h.test(d[f])?d[f]=d[f].replace(h,"top"):i.test(d[f])?d[f]=d[f].replace(i,"right"):b.test(d[f])&&(g=d[f].match(/\d*deg/),g=(parseInt(g)-90)*-1+"deg",d[f]=d[f].replace(b,g))):d[f]=d[f].replace(/radial-gradient/,"-o-radial-gradient").replace(/\(+\s*(.*) at\s*([^,]+)/g,"($2, $1");try{"".trim(),c=!0}catch(l){c=!1}c&&(d[f]=d[f].trim()),f++}return d.toString().replace(/\[/g,"").replace(/\]/g,"");})()`;
	@backgroundW3C: ~`(function(){var a,b,c,d,e;a="@{arguments}",b=null,c=a.split(/,(?=\s*(?:linear|radial))/g),d=c.length,e=0;while(e<d){try{"".trim(),b=!0}catch(f){b=!1}b&&(c[e]=c[e].trim()),e++}return c.toString().replace(/\[/g,"").replace(/\]/g,"");}())`;
	@backgroundPIE: ~`(function(){var a,b,c,d,e;a="@{arguments}",b=null,c=a.split(/,(?=\s*(?:linear|radial))/g),d=c.length,e=0;while(e<d){try{"".trim(),b=!0}catch(f){b=!1}b&&(c[e]=c[e].trim()),e++}return c.toString().replace(/\[/g,"").replace(/\]/g,"");}())`;

	.result(@arguments, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) { background-image: @arguments; }
	.result(@arguments, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }
	.result(@arguments, @boolean, @localBoolean, @property) when (@boolean = true) and (@localBoolean = true) and (isstring(@property)) { background-image: @arguments; }
	.result(@arguments, @boolean, @localBoolean, @property) when not (@boolean = true), not (@localBoolean = true), not (isstring(@property)) { }
	.result(@arguments, @boolean, @localBoolean, @property) when (@boolean = true) and (@localBoolean = true) and (@property = true) { -pie-background: @arguments; }

	.result(@backgroundSVG, @svg, @svg, @backgroundSVG);
	// --  this comment must be here because of LESS bug
	.result(@backgroundMoz, @moz, @mozLocal);
	// --
	.result(@backgroundWebkit, @webkit, @webkitLocal);
	// --
	.result(@backgroundOpera, @opera, @operaLocal);
	// --
	.result(@backgroundW3C, @w3c, @w3cLocal);
	// --
	.result(@backgroundPIE, @pie, @pieLocal, true);
}
//  element { .background-image(linear-gradient(to bottom, #ffffff, #929292)); }


// .border-radius
.border-radius(@arguments:0) {

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-border-radius: @arguments; -webkit-background-clip: padding-box;}
		.inception (@signal, @arguments) when (@signal = 2) { -moz-border-radius: @arguments; -moz-background-clip: padding;}
		.inception (@signal, @arguments) when (@signal = 5) { border-radius: @arguments; background-clip: padding-box; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//  element { .border-radius(10px); } //  all corner rounded
//  element { .border-radius(~"10px / 20px"); } //  NEED TO BE ESCAPED OR LESS DEVIDE IT! Horizontal and vertical rounded differently
//  element { .border-radius(0 10px 0 0); } // only top right corner rounded

//  .transition
.transition(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	@transitionWebkit: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["background-size","border-","box-shadow","column","transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-webkit-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionMoz: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["background-size","border-","box-shadow","column","transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-moz-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionOpera: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-o-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionMs: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-ms-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionW3C: ~`(function(){var a,b,c;a="@{arguments}".split(","),c=!1,b=a.length;for(var d=0;d<b;d++){try{"".trim(),c=!0}catch(e){c=!1}a[d]=c?a[d].trim():a[d]}return a.join(", ").replace("[","").replace("]","");}())`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transition: ~`(function(){ var arg = "@{transitionWebkit}" || "all 0 ease 0"; if( !/^\w*([ X])/.test(arg) ) { arg = arg.replace(/,/g,"") } return arg; })()`; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transition: ~`(function(){ var arg = "@{transitionMoz}" || "all 0 ease 0"; if( !/^\w*([ X])/.test(arg) ) { arg = arg.replace(/,/g,"") } return arg; })()`; }
		.inception (@signal, @arguments) when (@signal = 3) { -o-transition:~`(function(){ var arg = "@{transitionOpera}" || "all 0 ease 0"; if( !/^\w*([ X])/.test(arg) ) { arg = arg.replace(/,/g,"") } return arg; })()`; }
		.inception (@signal, @arguments) when (@signal = 4) { -ms-transition: ~`(function(){ var arg = "@{transitionMs}" || "all 0 ease 0"; if( !/^\w*([ X])/.test(arg) ) { arg = arg.replace(/,/g,"") } return arg; })()`; }
		.inception (@signal, @arguments) when (@signal = 5) { transition: ~`(function(){ var arg = "@{transitionW3C}" || "all 0 ease 0"; if( !/^\w*([ X])/.test(arg) ) { arg = arg.replace(/,/g,"") } return arg; })()`; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @msSignal, @ms, @msLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//   element { .transition(transform 3s linear); }


//  .transition-property
.transition-property(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	@transitionWebkit: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["background-size","border-","box-shadow","column","transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-webkit-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionMoz: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["background-size","border-","box-shadow","column","transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-moz-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionOpera: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-o-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionMs: ~`(function(){var a,b,c,d,e,f,g;a="@{arguments}".split(","),c=["transform"],d=c.length,e=a,f=!1,b=a.length;for(var h=0;h<d;h++)for(var i=0;i<b;i++){g=new RegExp(c[h],"g");try{"".trim(),f=!0}catch(j){f=!1}a[i]=f?a[i].trim():a[i],g.test(a[i])&&(e[i]=a[i].replace(g,"-ms-"+c[h]))}return e.join(", ").replace("[","").replace("]","");}())`;
	@transitionW3C: ~`(function(){var a,b,c;a="@{arguments}".split(","),c=!1,b=a.length;for(var d=0;d<b;d++){try{"".trim(),c=!0}catch(e){c=!1}a[d]=c?a[d].trim():a[d]}return a.join(", ").replace("[","").replace("]","");}())`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transition-property: ~`(function(){ var arg = "@{transitionWebkit}" || "0"; var decision = false; try{ var hasComma = arg.match(/([^ ,][a-z0-9-]*)/g); if (hasComma.length < 2) { decision = true; } } catch (e) {} if (decision === true) arg = hasComma.join(" ").replace(/,/g,""); return arg; }())`; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transition-property: ~`(function(){ var arg = "@{transitionMoz}" || "0"; var decision = false; try{ var hasComma = arg.match(/([^ ,][a-z0-9-]*)/g); if (hasComma.length < 2) { decision = true; } } catch (e) {} if (decision === true) arg = hasComma.join(" ").replace(/,/g,""); return arg; }())`; }
		.inception (@signal, @arguments) when (@signal = 3) { -o-transition-property: ~`(function(){ var arg = "@{transitionOpera}" || "0"; var decision = false; try{ var hasComma = arg.match(/([^ ,][a-z0-9-]*)/g); if (hasComma.length < 2) { decision = true; } } catch (e) {} if (decision === true) arg = hasComma.join(" ").replace(/,/g,""); return arg; }())`; }
		.inception (@signal, @arguments) when (@signal = 4) { -ms-transition-property: ~`(function(){ var arg = "@{transitionMs}" || "0"; var decision = false; try{ var hasComma = arg.match(/([^ ,][a-z0-9-]*)/g); if (hasComma.length < 2) { decision = true; } } catch (e) {} if (decision === true) arg = hasComma.join(" ").replace(/,/g,""); return arg; }())`; }
		.inception (@signal, @arguments) when (@signal = 5) { transition-property: ~`(function(){ var arg = "@{transitionW3C}" || "0"; var decision = false; try{ var hasComma = arg.match(/([^ ,][a-z0-9-]*)/g); if (hasComma.length < 2) { decision = true; } } catch (e) {} if (decision === true) arg = hasComma.join(" ").replace(/,/g,""); return arg; }())`; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @msSignal, @ms, @msLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//	element { .transition-property(width, height); }


//  .transition-duration
.transition-duration(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	@processing: ~`(function(){ var arg = "@{arguments}" || "0"; try{ var hasComma = arg.match(/,/g).length > 1 ? true : false; } catch (e) {} if (hasComma === true) arg = arg.replace(/,/g,""); arg = arg.replace("[","").replace("]",""); return arg; }())`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transition-duration: @processing; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transition-duration: @processing; }
		.inception (@signal, @arguments) when (@signal = 3) { -o-transition-duration: @processing; }
		.inception (@signal, @arguments) when (@signal = 5) { transition-duration: @processing; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//   element { .transition-duration(250ms); }


//  .transition-timing-function
.transition-timing-function(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	@processing: ~`(function(){ var arg = "@{arguments}" || "ease"; arg = arg.replace("[","").replace("]",""); return arg; }())`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transition-timing-function: @processing; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transition-timing-function: @processing; }
		.inception (@signal, @arguments) when (@signal = 3) { -o-transition-timing-function: @processing; }
		.inception (@signal, @arguments) when (@signal = 5) { transition-timing-function: @processing; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//   element { .transition-timing-function(cubic-bezier(0,0,1,1)); }


//  .transition-delay
.transition-delay(...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	@processing: ~`(function(){ var arg = "@{arguments}" || "0"; arg = arg.replace("[","").replace("]",""); return arg; }())`;

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transition-delay: @processing; }
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transition-delay: @processing; }
		.inception (@signal, @arguments) when (@signal = 3) { -o-transition-delay: @processing; }
		.inception (@signal, @arguments) when (@signal = 5) { transition-delay: @processing; }
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//  element { .transition-delay(2s); }

//  .transform
.transform(@arguments:none, ...){

	//  Local config for disabling properties

	@w3cLocal: true; // Unprefixed W3C syntax
	@webkitLocal: true; // Chrome 7+, Safari 5+, iOS5, Android
	@mozLocal: true; //  Firefox 4+
	@operaLocal: true; // Opera 10.5+
	@msLocal: true;  // IE 10+

	.result (@arguments, @signal, @boolean, @localBoolean) when (@boolean = true) and (@localBoolean = true) {
		.inception (@signal, @arguments) when (@signal = 1) { -webkit-transform: @arguments;}
		.inception (@signal, @arguments) when (@signal = 2) { -moz-transform: @arguments;}
		.inception (@signal, @arguments) when (@signal = 3) { -o-transform: @arguments;}
		.inception (@signal, @arguments) when (@signal = 4) { -ms-transform: @arguments;}
		.inception (@signal, @arguments) when (@signal = 5) { transform: @arguments;}
		.inception (@signal, @arguments) when (@signal > 5),(@signal < 1) { error: "Signal is out of range"; }
		.inception(@signal, @arguments);
	}
	.result (@arguments, @signal, @boolean, @localBoolean) when not (@boolean = true), not (@localBoolean = true) { }

	.result(@arguments, @webkitSignal, @webkit, @webkitLocal);
	// --  this comment must be here because of LESS bug
	.result(@arguments, @mozSignal, @moz, @mozLocal);
	// --
	.result(@arguments, @operaSignal, @opera, @operaLocal);
	// --
	.result(@arguments, @msSignal, @ms, @msLocal);
	// --
	.result(@arguments, @w3cSignal, @w3c, @w3cLocal);
}
//  element { .transform(scale(.5) translate(10px, 20px)); }