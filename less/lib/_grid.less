// GRID
// see http://getbootstrap.com/2.3.2/scaffolding.html#gridSystem for details
// --------------------------------------------------

// Default 940px grid
// -------------------------
@gridColumns:             12;
@gridColumnWidth:         60px;
@gridGutterWidth:         20px;
@gridRowWidth:            (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));

// 1200px min
@gridColumnWidth1200:     70px;
@gridGutterWidth1200:     30px;
@gridRowWidth1200:        (@gridColumns * @gridColumnWidth1200) + (@gridGutterWidth1200 * (@gridColumns - 1));

// 768px-979px
@gridColumnWidth768:      42px;
@gridGutterWidth768:      20px;
@gridRowWidth768:         (@gridColumns * @gridColumnWidth768) + (@gridGutterWidth768 * (@gridColumns - 1));


// Fluid grid
// -------------------------
@fluidGridColumnWidth:    percentage(@gridColumnWidth/@gridRowWidth);
@fluidGridGutterWidth:    percentage(@gridGutterWidth/@gridRowWidth);

// 1200px min
@fluidGridColumnWidth1200:     percentage(@gridColumnWidth1200/@gridRowWidth1200);
@fluidGridGutterWidth1200:     percentage(@gridGutterWidth1200/@gridRowWidth1200);

// 768px-979px
@fluidGridColumnWidth768:      percentage(@gridColumnWidth768/@gridRowWidth768);
@fluidGridGutterWidth768:      percentage(@gridGutterWidth768/@gridRowWidth768);

// Block level inputs
.input-block-level {
	display: block;
	width: 100%;
	min-height: 1px; // Make inputs at least the height of their button counterpart (base line-height + padding + border)
	.box-sizing(border-box); // Makes inputs behave like true block-level elements
}

// Make a Grid
// Use .makeRow and .makeColumn to assign semantic layouts grid system behavior
.makeRow() {
	margin-left: @gridGutterWidth * -1;
	.clearfix();
}
.makeColumn(@columns: 1, @offset: 0) {
	float: left;
	margin-left: (@gridColumnWidth * @offset) + (@gridGutterWidth * (@offset - 1)) + (@gridGutterWidth * 2);
	width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
}

// The Grid
#grid {

	.core (@gridColumnWidth, @gridGutterWidth) {

		.spanX (@index) when (@index > 0) {
			.span@{index} { .span(@index); }
			.spanX(@index - 1);
		}
		.spanX (0) {}

		.offsetX (@index) when (@index > 0) {
			.offset@{index} { .offset(@index); }
			.offsetX(@index - 1);
		}
		.offsetX (0) {}

		.offset (@columns) {
			margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
		}

		.span (@columns) {
			width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
		}

		.row {
			margin-left: @gridGutterWidth * -1;
			.clearfix();
		}

		[class*="span"] {
			float: left;
			min-height: 1px; // prevent collapsing columns
			margin-left: @gridGutterWidth;
		}

		// Set the container width, and override it for fixed navbars in media queries
		.container,
		.navbar-static-top .container,
		.navbar-fixed-top .container,
		.navbar-fixed-bottom .container { .span(@gridColumns); }

		// generate .spanX and .offsetX
		.spanX (@gridColumns);
		.offsetX (@gridColumns);

	}

	.fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

		.spanX (@index) when (@index > 0) {
			.span@{index} { .span(@index); }
			.spanX(@index - 1);
		}
		.spanX (0) {}

		.offsetX (@index) when (@index > 0) {
			.offset@{index} { .offset(@index); }
			.offset@{index}:first-child { .offsetFirstChild(@index); }
			.offsetX(@index - 1);
		}
		.offsetX (0) {}

		.offset (@columns) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
		}

		.offsetFirstChild (@columns) {
			margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
			*margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
		}

		.span (@columns) {
			width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
			*width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
		}

		.row-fluid {
			width: 100%;
			.clearfix();
			[class*="span"] {
				.input-block-level();
				float: left;
				margin-left: @fluidGridGutterWidth;
				*margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
			}
			[class*="span"]:first-child {
				margin-left: 0;
			}

			// Space grid-sized controls properly if multiple per line
			.controls-row [class*="span"] + [class*="span"] {
				margin-left: @fluidGridGutterWidth;
			}

			// generate .spanX and .offsetX
			.spanX (@gridColumns);
			.offsetX (@gridColumns);
		}

	}

	.input(@gridColumnWidth, @gridGutterWidth) {

		.spanX (@index) when (@index > 0) {
			input.span@{index}, textarea.span@{index}, .uneditable-input.span@{index} { .span(@index); }
			.spanX(@index - 1);
		}
		.spanX (0) {}

		.span(@columns) {
			width: ((@gridColumnWidth) * @columns) + (@gridGutterWidth * (@columns - 1)) - 14;
		}

		input,
		textarea,
		.uneditable-input {
			margin-left: 0; // override margin-left from core grid system
		}

		// Space grid-sized controls properly if multiple per line
		.controls-row [class*="span"] + [class*="span"] {
			margin-left: @gridGutterWidth;
		}

		// generate .spanX
		.spanX (@gridColumns);

	}
}

// Fixed (940px)
#grid > .core(@gridColumnWidth, @gridGutterWidth);

// Fluid (940px)
#grid > .fluid(@fluidGridColumnWidth, @fluidGridGutterWidth);

// Reset utility classes due to specificity
[class*="span"].hide,
.row-fluid [class*="span"].hide {
	display: none;
}

[class*="span"].pull-right,
.row-fluid [class*="span"].pull-right {
	float: right;
}